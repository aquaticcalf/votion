// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Workspace {
    id        String   @id @default(cuid())
    name      String   @default("My Workspace")
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    pages     Page[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Page {
    id          String    @id @default(cuid())
    title       String    @default("Untitled")
    icon        String?
    cover       String?
    parentId    String?
    parent      Page?     @relation("PageChildren", fields: [parentId], references: [id], onDelete: Cascade)
    children    Page[]    @relation("PageChildren")
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    blocks      Block[]
    database    Database?
    archived    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([workspaceId])
    @@index([userId])
    @@index([parentId])
}

model Block {
    id        String   @id @default(cuid())
    type      String
    content   Json
    order     Int
    pageId    String
    page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([pageId])
}

model Database {
    id         String         @id @default(cuid())
    pageId     String         @unique
    page       Page           @relation(fields: [pageId], references: [id], onDelete: Cascade)
    properties Json
    rows       DatabaseRow[]
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt

    @@index([pageId])
}

model DatabaseRow {
    id         String   @id @default(cuid())
    databaseId String
    database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
    values     Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([databaseId])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    username      String?     @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    workspaces    Workspace[]
    pages         Page[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
